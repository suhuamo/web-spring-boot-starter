package ${package.Entity};
## 添加需要的包
###foreach($pkg in ${table.importPackages})
##import ${pkg};
###end
import com.baomidou.mybatisplus.annotation.*;
import java.io.Serializable;
import java.time.LocalDateTime;
import com.fasterxml.jackson.annotation.JsonFormat;
import jakarta.persistence.Entity;
import jakarta.persistence.Id;
import jakarta.persistence.Table;
import lombok.*;
import lombok.experimental.Accessors;

## vm的语句必须顶格，否则会出现生成的代码格式混乱的问题，因为vm语句的空行/空格会被同样写入自动生成文件
/**
* <p>
* $!{table.comment} 数据表实体类
* </p>
*
* @author ${author}
* @date ${date}
*/
@Data
@NoArgsConstructor
@Accessors(chain = true)
@Entity
@Table(name = "${table.name}")
public class ${entity} implements Serializable {

    private static final long serialVersionUID = 1L;

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
#if(${field.keyFlag})
    #set($keyPropertyName=${field.propertyName})
#end
## 设置数据库字段的评论
#if("$!field.comment" != "")
    /**
     * ${field.comment}
     */
#end
## 给日期字段加上格式化
#if(${field.propertyName.contains("Time")})
    @JsonFormat(pattern = "yyyy-MM-dd HH:mm:ss", timezone="GMT+8")
#end
## field.keyFlag.是否为唯一键，即主键
#if(${field.keyFlag})
## 主键
#if(${field.keyIdentityFlag})
    @Id
    @TableId(value = "${field.name}", type = IdType.AUTO)
#elseif(${field.convert})
    @TableId("${field.name}")
#end
## 普通字段
#else
## 给updateTime字段加上注解，使得ioc控制自动更新时间
#if(${field.propertyName.equals("updateTime")})
    @TableField(value = "${field.name}", fill = FieldFill.INSERT_UPDATE)
## 给createTime字段加上注解，使得ioc控制自动创建时间
#elseif(${field.propertyName.equals("createTime")})
    @TableField(value = "${field.name}", fill = FieldFill.INSERT)
## 其他字段则只加映射就可以了
#else
    @TableField(value = "${field.name}")
#end
#end
## 乐观锁注解
#if(${versionFieldName}==${field.name})
@Version
#end
## 逻辑删除注解
#if(${logicDeleteFieldName}==${field.name})
@TableLogic
#end
##@Column(name = "${field.name}", length = 36)
    private ${field.propertyType} ${field.propertyName};
#end
## ----------  END 字段循环遍历  ----------

#if(!${entityLombokModel})
#foreach($field in ${table.fields})
    #if(${field.propertyType.equals("boolean")})
        #set($getprefix="is")
    #else
        #set($getprefix="get")
    #end

public ${field.propertyType} ${getprefix}${field.capitalName}(){
        return ${field.propertyName};
        }

    #if(${entityBuilderModel})
    public ${entity} set${field.capitalName}(${field.propertyType} ${field.propertyName}){
    #else
    public void set${field.capitalName}(${field.propertyType} ${field.propertyName}) {
    #end
        this.${field.propertyName} = ${field.propertyName};
    #if(${entityBuilderModel})
            return this;
    #end
        }
#end
#end

#if(${activeRecord})
@Override
protected Serializable pkVal(){
#if(${keyPropertyName})
        return this.${keyPropertyName};
#else
        return this.id;
#end
    }

#end
#if(!${entityLombokModel})
@Override
public String toString() {
    return "${entity}{" +
#foreach($field in ${table.fields})
    #if($!{velocityCount}==1)
            "${field.propertyName}=" + ${field.propertyName} +
    #else
            ", ${field.propertyName}=" + ${field.propertyName} +
    #end
#end
    "}";
    }
#end
}
