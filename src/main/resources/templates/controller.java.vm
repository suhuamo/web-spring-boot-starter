package ${package.Controller};

import lombok.extern.slf4j.Slf4j;
import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;
import com.suhuamo.web.common.CodeEnum;
import com.suhuamo.web.common.ResponseResult;
import ${package.Service}.${table.serviceName};
import ${package.Entity}.${entity};
import ${package.Entity}.dto.${table.entityPath}.*;
import ${package.Entity}.vo.${entity}VO;

/**
 *
 * @author ${author}
 * @date ${date}
 */
@Slf4j
@RestController
@RequestMapping("/#if(${controllerMappingHyphenStyle})${controllerMappingHyphen}#else${table.entityPath}#end#if(1==1)s#end")
public class ${table.controllerName} {

    @Autowired
    private ${table.serviceName} ${table.entityPath}Service;

    /**
       * 新增 ${table.entityPath}
       * @param ${table.entityPath}AddDTO
       * @return ResponseResult<${entity}>
       */
    @PostMapping
    public ResponseResult<${entity}> add${entity}(@RequestBody ${entity}AddDTO ${table.entityPath}AddDTO) {
        // 1. 校验数据
        ${table.entityPath}Service.validAddData(${table.entityPath}AddDTO);
        // 2. 转换类型
        ${entity} ${table.entityPath} = ${table.entityPath}Service.addDtoToPo(${table.entityPath}AddDTO);
        // 3. 插入数据
        ${table.entityPath}Service.save(${table.entityPath});
        // 4. 转换为vo返回给前端
        return ResponseResult.ok(${table.entityPath}Service.poToVo(${table.entityPath}));
    }

    /**
     * 根据 id 删除 ${table.entityPath}
     * @param id
     * @return ResponseResult<Boolean>
     */
    @DeleteMapping("/{id}")
    public ResponseResult<Boolean> delete${entity}ById(@PathVariable("id") Integer id) {
        // 1. 校验 id 是否存在
        if(!${table.entityPath}Service.idExists(id)) {
            return ResponseResult.error(CodeEnum.NOT_FOUND_ERROR);
        }
        // 2. 删除数据
        ${table.entityPath}Service.removeById(id);
        return ResponseResult.ok(true);
    }

    /**
     * 根据 id 修改 ${table.entityPath}
     * @param ${table.entityPath}UpdateDTO
     * @return ResponseResult<${entity}>
     */
    @PutMapping("/{id}")
    public ResponseResult<${entity}> update${entity}ById(@RequestBody ${entity}UpdateDTO ${table.entityPath}UpdateDTO) {
        // 1. 校验数据
        ${table.entityPath}Service.validUpdateData(${table.entityPath}UpdateDTO);
        // 2. 转换类型
        ${entity} ${table.entityPath} = ${table.entityPath}Service.updateDtoToPo(${table.entityPath}UpdateDTO);
        // 3. 更新数据库
        ${table.entityPath}Service.updateById(${table.entityPath});
        // 4. 返回vo给前端
        return ResponseResult.ok(${table.entityPath}Service.poToVo(${table.entityPath}));
    }

    /**
     * 查询所有 ${table.entityPath}, 可由传入参数限制条件
     * @param
     * @return ResponseResult<List<${entity}>>
     */
    @GetMapping
    public ResponseResult<Page<${entity}VO>> getAll${entity}List(${entity}QueryDTO ${table.entityPath}QueryDTO) {
        // 1. 校验数据
        ${table.entityPath}Service.validQueryData(${table.entityPath}QueryDTO);
        // 2. 根据数据解析 Wrapper
        Wrapper<${entity}> queryWrapper = ${table.entityPath}Service.getQueryWrapper(${table.entityPath}QueryDTO);
        // 3. 进行查询
        Page<${entity}> ${table.entityPath}Page = ${table.entityPath}Service.page(new Page<>(${table.entityPath}QueryDTO.getCurrent(), ${table.entityPath}QueryDTO.getPageSize()), queryWrapper);
        // 4. 返回vo给前端
        return ResponseResult.ok(${table.entityPath}Service.pageToVo(${table.entityPath}Page));
    }

    /**
     * 根据 id 查询 ${table.entityPath}
     * @param id
     * @return ResponseResult<${entity}>
     */
    @GetMapping("/{id}")
    public ResponseResult<${entity}VO> get${entity}ById(@PathVariable("id") Integer id) {
        // 1. 校验数据
        if(!${table.entityPath}Service.idExists(id)) {
            return ResponseResult.error(CodeEnum.NOT_FOUND_ERROR);
        }
        // 2. 查询数据
        ${entity} ${table.entityPath} = ${table.entityPath}Service.getById(id);
        // 3. 返回vo给前端
        return ResponseResult.ok(${table.entityPath}Service.poToVo(${table.entityPath}));
    }
}
